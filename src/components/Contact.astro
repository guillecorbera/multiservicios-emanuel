---
import { getTranslation, type Lang } from '../utils/i18n';

interface Props {
    currentLang: Lang;
}

const { currentLang } = Astro.props; 
const t = (key: string) => getTranslation(currentLang, key);
---

<section id="contacto" class="py-20 bg-white">
  <div class="container mx-auto px-4">
    <h2 class="text-4xl font-bold text-center text-gray-800 mb-12" data-translate="contact_title">
      Contacto
    </h2>
    
    <div class="max-w-7xl mx-auto">
      <div class="text-center mb-12">
        <p class="text-xl text-gray-600 mb-8" data-translate="contact_call_to_action">
          ¬øTienes un proyecto en mente? ¬°Cont√°ctanos!
        </p>
      </div>
      
      <!-- Formulario y Mapa -->
      <div class="grid lg:grid-cols-2 gap-12 mb-16">
        <!-- Formulario de Contacto -->
        <div class="bg-gray-50 rounded-lg p-8">
          <form id="contactForm" class="space-y-6">
            <div>
              <label for="name" class="block text-sm font-medium text-gray-700 mb-2" data-translate="form_name">
                Nombre completo
              </label>
              <input 
                type="text" 
                id="name" 
                name="name" 
                required 
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200"
                placeholder=""
              >
              <div id="name-error" class="hidden text-red-500 text-sm mt-1" data-translate="form_validation_name_required">
                El nombre es obligatorio
              </div>
            </div>
            
            <div>
              <label for="email" class="block text-sm font-medium text-gray-700 mb-2" data-translate="form_email">
                Correo electr√≥nico
              </label>
              <input 
                type="email" 
                id="email" 
                name="email" 
                required 
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200"
                placeholder=""
              >
              <div id="email-error" class="hidden text-red-500 text-sm mt-1">
                <span id="email-required" class="hidden" data-translate="form_validation_email_required">El email es obligatorio</span>
                <span id="email-invalid" class="hidden" data-translate="form_validation_email_invalid">Por favor, introduce un email v√°lido</span>
              </div>
            </div>
            
            <div>
              <label for="phone" class="block text-sm font-medium text-gray-700 mb-2" data-translate="form_phone">
                Tel√©fono
              </label>
              <input 
                type="tel" 
                id="phone" 
                name="phone" 
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200"
                placeholder=""
                pattern="[+]?[0-9\s\-\(\)]+"
              >
              <div id="phone-error" class="hidden text-red-500 text-sm mt-1" data-translate="form_validation_phone_invalid">
                Por favor, introduce un tel√©fono v√°lido
              </div>
            </div>
            
            <div>
              <label for="service" class="block text-sm font-medium text-gray-700 mb-2" data-translate="form_service">
                Tipo de servicio
              </label>
              <select 
                id="service" 
                name="service" 
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200"
              >
                <option value="" data-translate="service_select_option">Selecciona un servicio</option>
                <option value="reforms" data-translate="service_reforms">Reformas integrales</option>
                <option value="painting" data-translate="service_painting">Pintura y decoraci√≥n</option>
                <option value="electrical" data-translate="service_electrical">Instalaciones el√©ctricas</option>
                <option value="plumbing" data-translate="service_plumbing">Fontaner√≠a</option>
                <option value="other" data-translate="service_other">Otro</option>
              </select>
            </div>
            
            <div>
              <label for="message" class="block text-sm font-medium text-gray-700 mb-2" data-translate="form_message">
                Mensaje
              </label>
              <textarea 
                id="message" 
                name="message" 
                rows="5" 
                required
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 resize-vertical"
                placeholder=""
                minlength="10"
              ></textarea>
              <div id="message-error" class="hidden text-red-500 text-sm mt-1" data-translate="form_validation_message_required">
                El mensaje es obligatorio
              </div>
            </div>
            
            <!-- Captcha Simple -->
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <label for="captcha" class="block text-sm font-medium text-gray-700 mb-2">
                <span id="captcha-question">
                  <span id="captcha-text">Verificaci√≥n: ¬øCu√°nto es</span> <span id="num1">5</span> + <span id="num2">3</span>?
                </span>
              </label>
              <input 
                type="number" 
                id="captcha" 
                name="captcha" 
                required 
                class="w-32 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200"
                placeholder=""
                data-translate-placeholder="form_captcha_placeholder"
              >
              <div id="captcha-error" class="hidden text-red-500 text-sm mt-1">
                <span id="captcha-required" class="hidden" data-translate="form_validation_captcha_required">Por favor, responde la pregunta de verificaci√≥n</span>
                <span id="captcha-incorrect" class="hidden" data-translate="form_validation_captcha_incorrect">Respuesta incorrecta. Int√©ntalo de nuevo</span>
              </div>
            </div>
            
            <button 
              type="submit" 
              class="w-full bg-blue-600 text-white py-3 px-6 rounded-lg hover:bg-blue-700 transition duration-300 font-semibold text-lg"
              data-translate="form_submit"
            >
              Enviar mensaje
            </button>
            
            <!-- Estados del formulario -->
            <div id="form-status" class="hidden">
              <div id="form-sending" class="hidden text-blue-600 text-center font-medium" data-translate="form_sending">
                Enviando...
              </div>
              <div id="form-success" class="hidden text-green-600 text-center font-medium" data-translate="form_success">
                ¬°Mensaje enviado correctamente!
              </div>
              <div id="form-error" class="hidden text-red-600 text-center font-medium" data-translate="form_error">
                Error al enviar el mensaje. Int√©ntalo de nuevo.
              </div>
            </div>
          </form>
        </div>
        
        <!-- Mapa -->
        <div class="bg-gray-50 rounded-lg p-8 flex flex-col">
          <h3 class="text-2xl font-semibold text-gray-800 mb-6" data-translate="map_title">
            Nuestra ubicaci√≥n
          </h3>
          <div class="w-full flex-1 bg-gray-300 rounded-lg flex items-center justify-center relative" style="min-height: 320px;">
            <!-- Mapa de Google Maps -->
            <iframe src="https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d889.5197724419829!2d1.9220551448555003!3d41.418040696471145!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sca!2ses!4v1761336764004!5m2!1sca!2ses" 
              width="100%" 
              height="100%" 
              style="border:0; min-height: 320px;" 
              allowfullscreen="" 
              loading="lazy" 
              referrerpolicy="no-referrer-when-downgrade"
              class="rounded-lg shadow-lg w-full h-full"
              title="Ubicaci√≥n de Multiservicios Emanuel en Barcelona">
            </iframe>
            
      
            <!-- Overlay con informaci√≥n de contacto -->
            <div class="absolute bottom-4 left-4 bg-white/90 backdrop-blur-sm rounded-lg p-3 shadow-lg">
              <p class="text-sm font-semibold text-gray-800">üìç Barcelona, Espa√±a</p>
              <p class="text-xs text-gray-600">Zona de servicio: Barcelona y alrededores</p>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Informaci√≥n de contacto -->
      <div class="grid md:grid-cols-3 gap-8">
        <!-- Tel√©fono -->
        <a 
          href="tel:+34123456789"
          class="flex flex-col items-center p-6 bg-teal-50 rounded-lg hover:bg-teal-100 transition-all duration-300 hover:scale-105 cursor-pointer group"
        >
          <div class="bg-teal-600 text-white p-3 rounded-full mb-4 group-hover:bg-teal-700 transition-colors duration-300">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
            </svg>
          </div>
          <h3 class="text-lg font-semibold text-gray-800 mb-2 group-hover:text-teal-600 transition-colors duration-300" data-translate="contact_info_phone">
            {t('contact_info_phone')}
          </h3>
          <p class="text-gray-600 text-center group-hover:text-gray-800 transition-colors duration-300">+34 123 456 789</p>
        </a>
        
        <!-- Email -->
        <a 
          href="mailto:info@multiservicios-emanuel.com"
          class="flex flex-col items-center p-6 bg-blue-50 rounded-lg hover:bg-blue-100 transition-all duration-300 hover:scale-105 cursor-pointer group"
        >
          <div class="bg-blue-600 text-white p-3 rounded-full mb-4 group-hover:bg-blue-700 transition-colors duration-300">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 002 2z"></path>
            </svg>
          </div>
          <h3 class="text-lg font-semibold text-gray-800 mb-2 group-hover:text-blue-600 transition-colors duration-300" data-translate="contact_info_email">
            {t('contact_info_email')}
          </h3>
          <p class="text-gray-600 text-center group-hover:text-gray-800 transition-colors duration-300">info@multiservicios-emanuel.com</p>
        </a>
        
        <!-- WhatsApp -->
        <a 
          href="https://wa.me/34123456789?text=Hola%2C%20me%20gustar%C3%ADa%20solicitar%20informaci%C3%B3n%20sobre%20sus%20servicios"
          target="_blank"
          rel="noopener noreferrer"
          class="flex flex-col items-center p-6 bg-green-50 rounded-lg hover:bg-green-100 transition-all duration-300 hover:scale-105 cursor-pointer group"
        >
          <div class="bg-green-600 text-white p-3 rounded-full mb-4 group-hover:bg-green-700 transition-colors duration-300">
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
              <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.515z"/>
            </svg>
          </div>
          <h3 class="text-lg font-semibold text-gray-800 mb-2 group-hover:text-green-600 transition-colors duration-300">
            WhatsApp
          </h3>
          <p class="text-gray-600 text-center group-hover:text-gray-800 transition-colors duration-300">+34 123 456 789</p>
        </a>
        
      </div>
    </div>
  </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('contactForm') as HTMLFormElement;
  const formStatus = document.getElementById('form-status');
  const sendingStatus = document.getElementById('form-sending');
  const successStatus = document.getElementById('form-success');
  const errorStatus = document.getElementById('form-error');
  
  // Elementos de validaci√≥n
  const nameInput = document.getElementById('name') as HTMLInputElement;
  const emailInput = document.getElementById('email') as HTMLInputElement;
  const phoneInput = document.getElementById('phone') as HTMLInputElement;
  const messageInput = document.getElementById('message') as HTMLTextAreaElement;
  const captchaInput = document.getElementById('captcha') as HTMLInputElement;
  
  const nameError = document.getElementById('name-error');
  const emailError = document.getElementById('email-error');
  const emailRequired = document.getElementById('email-required');
  const emailInvalid = document.getElementById('email-invalid');
  const phoneError = document.getElementById('phone-error');
  const messageError = document.getElementById('message-error');
  const captchaError = document.getElementById('captcha-error');
  const captchaRequired = document.getElementById('captcha-required');
  const captchaIncorrect = document.getElementById('captcha-incorrect');
  
  // Elementos del captcha
  const num1Element = document.getElementById('num1');
  const num2Element = document.getElementById('num2');
  
  // Variables para el captcha
  let captchaNum1 = 0;
  let captchaNum2 = 0;
  let captchaAnswer = 0;
  
  if (!form || !formStatus || !sendingStatus || !successStatus || !errorStatus) {
    console.error('No se pudieron encontrar los elementos del formulario');
    return;
  }
  
  // Generar captcha inicial
  const generateCaptcha = () => {
    captchaNum1 = Math.floor(Math.random() * 10) + 1;
    captchaNum2 = Math.floor(Math.random() * 10) + 1;
    captchaAnswer = captchaNum1 + captchaNum2;
    
    // Buscar elementos por si no se encontraron inicialmente
    const num1El = num1Element || document.getElementById('num1');
    const num2El = num2Element || document.getElementById('num2');
    const captchaTextEl = document.getElementById('captcha-text');
    
    if (num1El) {
      num1El.textContent = captchaNum1.toString();
    }
    
    if (num2El) {
      num2El.textContent = captchaNum2.toString();
    }
    
    // Actualizar texto del captcha seg√∫n el idioma actual
    if (captchaTextEl) {
      const currentLang = localStorage.getItem('selectedLanguage') || 'es';
      const captchaTexts = {
        'es': 'Verificaci√≥n: ¬øCu√°nto es',
        'ca': 'Verificaci√≥: Quant √©s',
        'en': 'Verification: What is'
      };
      captchaTextEl.textContent = captchaTexts[currentLang as keyof typeof captchaTexts] || captchaTexts['es'];
    }
    
    // Limpiar input del captcha
    if (captchaInput) captchaInput.value = '';
  };
  
  // Generar captcha inicial con un peque√±o delay para asegurar que el DOM est√© listo
  setTimeout(() => {
    generateCaptcha();
  }, 100);
  
  // Funciones de validaci√≥n
  const validateEmail = (email: string): boolean => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };
  
  const validatePhone = (phone: string): boolean => {
    if (!phone) return true; // Campo opcional
    const phoneRegex = /^[+]?[0-9\s\-\(\)]{9,}$/;
    return phoneRegex.test(phone);
  };
  
  const validateCaptcha = (): boolean => {
    const value = parseInt(captchaInput.value);
    return !isNaN(value) && value === captchaAnswer;
  };
  
  const showFieldError = (errorElement: HTMLElement | null, show: boolean = true) => {
    if (errorElement) {
      if (show) {
        errorElement.classList.remove('hidden');
      } else {
        errorElement.classList.add('hidden');
      }
    }
  };
  
  const validateField = (input: HTMLInputElement | HTMLTextAreaElement, errorElement: HTMLElement | null): boolean => {
    const value = input.value.trim();
    let isValid = true;
    
    // Resetear estilos
    input.classList.remove('border-red-500', 'ring-red-500');
    input.classList.add('border-gray-300');
    
    if (input.hasAttribute('required') && !value) {
      isValid = false;
    } else if (input.type === 'email' && value && !validateEmail(value)) {
      isValid = false;
    } else if (input.type === 'tel' && value && !validatePhone(value)) {
      isValid = false;
    } else if (input.tagName === 'TEXTAREA' && value && value.length < 10) {
      isValid = false;
    }
    
    if (!isValid) {
      input.classList.remove('border-gray-300');
      input.classList.add('border-red-500', 'ring-red-500');
      showFieldError(errorElement, true);
    } else {
      showFieldError(errorElement, false);
    }
    
    return isValid;
  };
  
  // Validaci√≥n espec√≠fica para email
  const validateEmailField = (): boolean => {
    const value = emailInput.value.trim();
    let isValid = true;
    
    emailInput.classList.remove('border-red-500', 'ring-red-500');
    emailInput.classList.add('border-gray-300');
    showFieldError(emailError, false);
    
    if (!value) {
      isValid = false;
      showFieldError(emailRequired, true);
      showFieldError(emailInvalid, false);
    } else if (!validateEmail(value)) {
      isValid = false;
      showFieldError(emailRequired, false);
      showFieldError(emailInvalid, true);
    } else {
      showFieldError(emailRequired, false);
      showFieldError(emailInvalid, false);
    }
    
    if (!isValid) {
      emailInput.classList.remove('border-gray-300');
      emailInput.classList.add('border-red-500', 'ring-red-500');
      showFieldError(emailError, true);
    }
    
    return isValid;
  };
  
  // Validaci√≥n espec√≠fica para captcha
  const validateCaptchaField = (): boolean => {
    const value = captchaInput.value.trim();
    let isValid = true;
    
    captchaInput.classList.remove('border-red-500', 'ring-red-500');
    captchaInput.classList.add('border-gray-300');
    showFieldError(captchaError, false);
    
    if (!value) {
      isValid = false;
      showFieldError(captchaRequired, true);
      showFieldError(captchaIncorrect, false);
    } else if (!validateCaptcha()) {
      isValid = false;
      showFieldError(captchaRequired, false);
      showFieldError(captchaIncorrect, true);
      // Generar nuevo captcha cuando la respuesta es incorrecta
      setTimeout(() => {
        generateCaptcha();
        showFieldError(captchaError, false);
      }, 2000);
    } else {
      showFieldError(captchaRequired, false);
      showFieldError(captchaIncorrect, false);
    }
    
    if (!isValid) {
      captchaInput.classList.remove('border-gray-300');
      captchaInput.classList.add('border-red-500', 'ring-red-500');
      showFieldError(captchaError, true);
    }
    
    return isValid;
  };
  
  // Validaci√≥n en tiempo real
  nameInput.addEventListener('blur', () => validateField(nameInput, nameError));
  emailInput.addEventListener('blur', () => validateEmailField());
  phoneInput.addEventListener('blur', () => validateField(phoneInput, phoneError));
  messageInput.addEventListener('blur', () => validateField(messageInput, messageError));
  captchaInput.addEventListener('blur', () => validateCaptchaField());
  
  // Limpiar errores al escribir
  nameInput.addEventListener('input', () => {
    if (nameInput.value.trim()) {
      showFieldError(nameError, false);
      nameInput.classList.remove('border-red-500', 'ring-red-500');
      nameInput.classList.add('border-gray-300');
    }
  });
  
  emailInput.addEventListener('input', () => {
    if (emailInput.value.trim()) {
      showFieldError(emailError, false);
      emailInput.classList.remove('border-red-500', 'ring-red-500');
      emailInput.classList.add('border-gray-300');
    }
  });
  
  phoneInput.addEventListener('input', () => {
    if (phoneInput.value.trim()) {
      showFieldError(phoneError, false);
      phoneInput.classList.remove('border-red-500', 'ring-red-500');
      phoneInput.classList.add('border-gray-300');
    }
  });
  
  messageInput.addEventListener('input', () => {
    if (messageInput.value.trim()) {
      showFieldError(messageError, false);
      messageInput.classList.remove('border-red-500', 'ring-red-500');
      messageInput.classList.add('border-gray-300');
    }
  });
  
  captchaInput.addEventListener('input', () => {
    if (captchaInput.value.trim()) {
      showFieldError(captchaError, false);
      captchaInput.classList.remove('border-red-500', 'ring-red-500');
      captchaInput.classList.add('border-gray-300');
    }
  });
  
  form.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    // Validar todos los campos
    const nameValid = validateField(nameInput, nameError);
    const emailValid = validateEmailField();
    const phoneValid = validateField(phoneInput, phoneError);
    const messageValid = validateField(messageInput, messageError);
    const captchaValid = validateCaptchaField();
    
    if (!nameValid || !emailValid || !phoneValid || !messageValid || !captchaValid) {
      // Enfocar el primer campo con error
      const firstErrorField = [nameInput, emailInput, phoneInput, messageInput, captchaInput]
        .find(input => input.classList.contains('border-red-500'));
      if (firstErrorField) {
        firstErrorField.focus();
        firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
      return;
    }
    
    // Mostrar estado de env√≠o
    formStatus.classList.remove('hidden');
    sendingStatus.classList.remove('hidden');
    successStatus.classList.add('hidden');
    errorStatus.classList.add('hidden');
    
    // Deshabilitar el bot√≥n de env√≠o
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    if (submitButton) {
      submitButton.disabled = true;
      submitButton.classList.add('opacity-50', 'cursor-not-allowed');
    }
    
    // Obtener datos del formulario
    const formData = new FormData(form);
    const data = {
      name: formData.get('name'),
      email: formData.get('email'),
      phone: formData.get('phone'),
      service: formData.get('service'),
      message: formData.get('message'),
      captcha: formData.get('captcha'),
      captchaAnswer: captchaAnswer
    };
    
    try {
      // Llamada a la API real
      const response = await fetch('/api/contact', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });
      
      // Verificar si la respuesta es JSON v√°lida
      let result;
      try {
        result = await response.json();
      } catch (jsonError) {
        console.error('Error parsing JSON response:', jsonError);
        throw new Error('Error de comunicaci√≥n con el servidor');
      }
      
      if (response.ok && result.success) {
        sendingStatus.classList.add('hidden');
        successStatus.classList.remove('hidden');
        form.reset();
        
        // Generar nuevo captcha despu√©s del env√≠o exitoso
        generateCaptcha();
        
        // Ocultar mensaje de √©xito despu√©s de 8 segundos
        setTimeout(() => {
          formStatus.classList.add('hidden');
        }, 8000);
      } else {
        // Mostrar error espec√≠fico del servidor o gen√©rico
        const errorMessage = result?.error || `Error ${response.status}: ${response.statusText}`;
        throw new Error(errorMessage);
      }
    } catch (error) {
      console.error('Error al enviar el formulario:', error);
      sendingStatus.classList.add('hidden');
      errorStatus.classList.remove('hidden');
      
      // Mostrar error espec√≠fico si est√° disponible
      const errorElement = document.getElementById('form-error');
      if (errorElement) {
        const errorMessage = (error instanceof Error ? error.message : 'Error desconocido al enviar el mensaje');
        errorElement.textContent = errorMessage;
      }
      
      // Ocultar mensaje de error despu√©s de 8 segundos
      setTimeout(() => {
        formStatus.classList.add('hidden');
      }, 8000);
    } finally {
      // Rehabilitar el bot√≥n de env√≠o
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.classList.remove('opacity-50', 'cursor-not-allowed');
      }
    }
  });

  // Funci√≥n para actualizar el captcha cuando cambie el idioma
  function updateCaptchaLanguage() {
    const captchaTextEl = document.getElementById('captcha-text');
    if (captchaTextEl) {
      const currentLang = localStorage.getItem('selectedLanguage') || 'es';
      const captchaTexts = {
        'es': 'Verificaci√≥n: ¬øCu√°nto es',
        'ca': 'Verificaci√≥: Quant √©s',
        'en': 'Verification: What is'
      };
      captchaTextEl.textContent = captchaTexts[currentLang as keyof typeof captchaTexts] || captchaTexts['es'];
    }
  }

  // Detectar cambios de idioma
  let lastStoredLang = localStorage.getItem('selectedLanguage') || 'es';
  
  setInterval(() => {
    try {
      const currentStoredLang = localStorage.getItem('selectedLanguage') || 'es';
      if (currentStoredLang !== lastStoredLang) {
        lastStoredLang = currentStoredLang;
        updateCaptchaLanguage();
      }
    } catch (error) {
      console.log('Error en detecci√≥n de cambios de idioma:', error);
    }
  }, 500);

  // El contacto usa el sistema global de traducciones manejado por Header.astro
  console.log('Componente de contacto inicializado');
});
</script>